- name: Install Required RPM Packages
  ansible.builtin.yum:
    name:
      - tmux
      - wget
      - jq
      - unzip
      - openssl-devel
      - git
      - ansible-core
    state: present
  become: true

- name: Create .aws directory
  ansible.builtin.file:
    path: "/home/ec2-user/.aws"
    state: directory

- name: Update .aws/config with region
  ansible.builtin.copy:
    dest: "/home/ec2-user/.aws/config"
    content: |
      [default]
      region = {{ aws_region }}

- name: Download OpenShift and AWS CLI tools
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: /home/ec2-user/
  loop:
    - "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ openshift_version }}.{{ ocp_patch_version }}/openshift-client-linux.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ openshift_version }}.{{ ocp_patch_version }}/openshift-install-linux.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ openshift_version }}.{{ ocp_patch_version }}/ccoctl-linux-rhel9.tar.gz"
    - "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
#    - "https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz"

- name: Unarchive Downloaded Files
  ansible.builtin.unarchive:
    src: "/home/ec2-user/{{ item }}"
    dest: /home/ec2-user/
    remote_src: yes
  loop:
    - openshift-client-linux.tar.gz
    - awscli-exe-linux-x86_64.zip
#    - rosa-linux.tar.gz
    - openshift-install-linux.tar.gz
    - ccoctl-linux-rhel9.tar.gz

- name: Copy CLI tools to /usr/bin
  copy:
    src: "/home/ec2-user/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    remote_src: yes
    mode: 0755
  loop:
    - oc
#    - rosa
    - kubectl
    - openshift-install
    - ccoctl
  become: yes

- name: Create credentials directory
  file:
    path: "/home/ec2-user/{{ item }}"
    state: directory
  loop:
    - install-dir
    - sts

- name: Delete existing sts resources
  shell: |
    cd /home/ec2-user/sts
    ccoctl aws delete --name {{ aws.sts_resource_name }} --region {{ aws_region }}

- name: Extract the list of CredentialsRequest objects from the OpenShift Container Platform release image
  shell: |
    cd /home/ec2-user/sts
    RELEASE_IMAGE=$(openshift-install version | awk '/release image/ {print $3}')
    oc adm release extract --credentials-requests \
    --cloud=aws \
    --to=/home/ec2-user/sts/credrequests \
    ${RELEASE_IMAGE}

- name: Create All STS Files
  shell: |
    cd /home/ec2-user/sts
    ccoctl aws create-all \
    --credentials-requests-dir /home/ec2-user/sts/credrequests/ \
    --name {{ aws.sts_resource_name }} \
    --region {{ aws_region }} \
    --create-private-s3-bucket

- name: Copy install-config.yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ item }}"
  loop:
    - install-config.yaml

- name: Copy Install-config.yaml to install-dir
  copy:
    src: "/home/ec2-user/install-config.yaml"
    dest: "/home/ec2-user/install-dir/install-config.yaml"
    remote_src: yes
    mode: 0644

- name: Generate Manifests
  shell: |
    openshift-install create manifests --dir /home/ec2-user/install-dir

- name: Copy STS credentials to install-dir/manifests
  copy:
    src: "/home/ec2-user/sts/manifests/"
    dest: "/home/ec2-user/install-dir/manifests/"
    remote_src: yes

- name: Copy STS tls files to install-dir/
  copy:
    src: /home/ec2-user/sts/tls
    dest: /home/ec2-user/install-dir/
    remote_src: yes

#- name: Install the cluster
#  shell: |
#    openshift-install create cluster --dir /home/ec2-user/install-dir --log-level=debug
#  async: 3600
#  poll: 0
#  register: cluster_deploy
#
#- name: Check the status of the install
#  ansible.builtin.async_status:
#    jid: "{{ cluster_deploy.ansible_job_id }}"
#  register: job_status
#  until: job_status.finished
#  retries: 120
#  delay: 30
#  ignore_errors: true

#- name: Destroy the cluster if install fails
#  shell: |
#    openshift-install destroy cluster --dir /home/ec2-user/install-dir --log-level=debug
#  when: install_result.failed